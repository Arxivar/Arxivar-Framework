/* 
 * Abletech.Arxivar.Server.WebApi.Services
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Class for the design of a sharing configuration.
    /// </summary>
    [DataContract]
    public partial class SharingDefinitionDTO :  IEquatable<SharingDefinitionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingDefinitionDTO" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier for the configuration.</param>
        /// <param name="DocumentTypeId">System id for the documentType..</param>
        /// <param name="BusinessUnitCode">BusinessUnit code..</param>
        /// <param name="Beginning">Days for the activation of the sharing..</param>
        /// <param name="Expiration">Days for the expiration of the sharing..</param>
        /// <param name="AfterSend">Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent .</param>
        /// <param name="RepeatSendMail">Resend for the mail..</param>
        /// <param name="RepeatSendMailTime">Resend mail Days..</param>
        /// <param name="RepeatSendMailNumber">Max number of resend for mail..</param>
        /// <param name="WorkflowAfterRead">Workflow id for the read operation..</param>
        /// <param name="WorkflowAfterExpiration">Workflow id for the expiration of a read sharing.</param>
        /// <param name="WorkflowAfterExpirationNotRead">Workflow id for the expiration of a not read sharing.</param>
        /// <param name="AlertForNoRead">Enable warning for no read sharing..</param>
        /// <param name="AlertForNoReadTime">Warning message for no read sharing days..</param>
        /// <param name="DisableAfterRead">Disable sharing after read..</param>
        /// <param name="DeleteAfterExpiration">Delete after expiration..</param>
        /// <param name="ImmediatlySend">Immediatly send..</param>
        /// <param name="SendTime">Send datetime..</param>
        /// <param name="MaxDownloadTime">Max number of download.</param>
        /// <param name="DetailsAsZip">Archive the details in one zip.</param>
        /// <param name="DefaultLanguage">Default language..</param>
        /// <param name="DownloadDirectly">Donwload the documents directly from mail.</param>
        /// <param name="Aggregable">Aggregable sharing..</param>
        /// <param name="AggregateMode">Possible values:  0: ByDefinition  1: ByDocumentType .</param>
        /// <param name="SharingMode">Possible values:  0: Link  1: Attachment  2: None .</param>
        /// <param name="MailDefinitions">List of mails to send..</param>
        /// <param name="HtmlForAccess">List of Html for access to sharing page..</param>
        /// <param name="HtmlForExpiration">List of html for expiration page.</param>
        /// <param name="SelectedFields">Fields For Profile selection..</param>
        /// <param name="SharingDefinitionSender">Sharing sender..</param>
        public SharingDefinitionDTO(string Id = default(string), int? DocumentTypeId = default(int?), string BusinessUnitCode = default(string), int? Beginning = default(int?), int? Expiration = default(int?), int? AfterSend = default(int?), bool? RepeatSendMail = default(bool?), int? RepeatSendMailTime = default(int?), int? RepeatSendMailNumber = default(int?), int? WorkflowAfterRead = default(int?), int? WorkflowAfterExpiration = default(int?), int? WorkflowAfterExpirationNotRead = default(int?), bool? AlertForNoRead = default(bool?), int? AlertForNoReadTime = default(int?), bool? DisableAfterRead = default(bool?), bool? DeleteAfterExpiration = default(bool?), bool? ImmediatlySend = default(bool?), DateTime? SendTime = default(DateTime?), int? MaxDownloadTime = default(int?), bool? DetailsAsZip = default(bool?), string DefaultLanguage = default(string), bool? DownloadDirectly = default(bool?), bool? Aggregable = default(bool?), int? AggregateMode = default(int?), int? SharingMode = default(int?), List<SharingMailDTO> MailDefinitions = default(List<SharingMailDTO>), List<SharingHtmlDTO> HtmlForAccess = default(List<SharingHtmlDTO>), List<SharingHtmlDTO> HtmlForExpiration = default(List<SharingHtmlDTO>), SelectDTO SelectedFields = default(SelectDTO), SharingDefinitionSenderDTO SharingDefinitionSender = default(SharingDefinitionSenderDTO))
        {
            this.Id = Id;
            this.DocumentTypeId = DocumentTypeId;
            this.BusinessUnitCode = BusinessUnitCode;
            this.Beginning = Beginning;
            this.Expiration = Expiration;
            this.AfterSend = AfterSend;
            this.RepeatSendMail = RepeatSendMail;
            this.RepeatSendMailTime = RepeatSendMailTime;
            this.RepeatSendMailNumber = RepeatSendMailNumber;
            this.WorkflowAfterRead = WorkflowAfterRead;
            this.WorkflowAfterExpiration = WorkflowAfterExpiration;
            this.WorkflowAfterExpirationNotRead = WorkflowAfterExpirationNotRead;
            this.AlertForNoRead = AlertForNoRead;
            this.AlertForNoReadTime = AlertForNoReadTime;
            this.DisableAfterRead = DisableAfterRead;
            this.DeleteAfterExpiration = DeleteAfterExpiration;
            this.ImmediatlySend = ImmediatlySend;
            this.SendTime = SendTime;
            this.MaxDownloadTime = MaxDownloadTime;
            this.DetailsAsZip = DetailsAsZip;
            this.DefaultLanguage = DefaultLanguage;
            this.DownloadDirectly = DownloadDirectly;
            this.Aggregable = Aggregable;
            this.AggregateMode = AggregateMode;
            this.SharingMode = SharingMode;
            this.MailDefinitions = MailDefinitions;
            this.HtmlForAccess = HtmlForAccess;
            this.HtmlForExpiration = HtmlForExpiration;
            this.SelectedFields = SelectedFields;
            this.SharingDefinitionSender = SharingDefinitionSender;
        }
        
        /// <summary>
        /// Unique identifier for the configuration
        /// </summary>
        /// <value>Unique identifier for the configuration</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// System id for the documentType.
        /// </summary>
        /// <value>System id for the documentType.</value>
        [DataMember(Name="documentTypeId", EmitDefaultValue=false)]
        public int? DocumentTypeId { get; set; }

        /// <summary>
        /// BusinessUnit code.
        /// </summary>
        /// <value>BusinessUnit code.</value>
        [DataMember(Name="businessUnitCode", EmitDefaultValue=false)]
        public string BusinessUnitCode { get; set; }

        /// <summary>
        /// Days for the activation of the sharing.
        /// </summary>
        /// <value>Days for the activation of the sharing.</value>
        [DataMember(Name="beginning", EmitDefaultValue=false)]
        public int? Beginning { get; set; }

        /// <summary>
        /// Days for the expiration of the sharing.
        /// </summary>
        /// <value>Days for the expiration of the sharing.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public int? Expiration { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent 
        /// </summary>
        /// <value>Possible values:  0: None  1: Email  2: R  3: RR  4: EmailArchiveContent </value>
        [DataMember(Name="afterSend", EmitDefaultValue=false)]
        public int? AfterSend { get; set; }

        /// <summary>
        /// Resend for the mail.
        /// </summary>
        /// <value>Resend for the mail.</value>
        [DataMember(Name="repeatSendMail", EmitDefaultValue=false)]
        public bool? RepeatSendMail { get; set; }

        /// <summary>
        /// Resend mail Days.
        /// </summary>
        /// <value>Resend mail Days.</value>
        [DataMember(Name="repeatSendMailTime", EmitDefaultValue=false)]
        public int? RepeatSendMailTime { get; set; }

        /// <summary>
        /// Max number of resend for mail.
        /// </summary>
        /// <value>Max number of resend for mail.</value>
        [DataMember(Name="repeatSendMailNumber", EmitDefaultValue=false)]
        public int? RepeatSendMailNumber { get; set; }

        /// <summary>
        /// Workflow id for the read operation.
        /// </summary>
        /// <value>Workflow id for the read operation.</value>
        [DataMember(Name="workflowAfterRead", EmitDefaultValue=false)]
        public int? WorkflowAfterRead { get; set; }

        /// <summary>
        /// Workflow id for the expiration of a read sharing
        /// </summary>
        /// <value>Workflow id for the expiration of a read sharing</value>
        [DataMember(Name="workflowAfterExpiration", EmitDefaultValue=false)]
        public int? WorkflowAfterExpiration { get; set; }

        /// <summary>
        /// Workflow id for the expiration of a not read sharing
        /// </summary>
        /// <value>Workflow id for the expiration of a not read sharing</value>
        [DataMember(Name="workflowAfterExpirationNotRead", EmitDefaultValue=false)]
        public int? WorkflowAfterExpirationNotRead { get; set; }

        /// <summary>
        /// Enable warning for no read sharing.
        /// </summary>
        /// <value>Enable warning for no read sharing.</value>
        [DataMember(Name="alertForNoRead", EmitDefaultValue=false)]
        public bool? AlertForNoRead { get; set; }

        /// <summary>
        /// Warning message for no read sharing days.
        /// </summary>
        /// <value>Warning message for no read sharing days.</value>
        [DataMember(Name="alertForNoReadTime", EmitDefaultValue=false)]
        public int? AlertForNoReadTime { get; set; }

        /// <summary>
        /// Disable sharing after read.
        /// </summary>
        /// <value>Disable sharing after read.</value>
        [DataMember(Name="disableAfterRead", EmitDefaultValue=false)]
        public bool? DisableAfterRead { get; set; }

        /// <summary>
        /// Delete after expiration.
        /// </summary>
        /// <value>Delete after expiration.</value>
        [DataMember(Name="deleteAfterExpiration", EmitDefaultValue=false)]
        public bool? DeleteAfterExpiration { get; set; }

        /// <summary>
        /// Immediatly send.
        /// </summary>
        /// <value>Immediatly send.</value>
        [DataMember(Name="immediatlySend", EmitDefaultValue=false)]
        public bool? ImmediatlySend { get; set; }

        /// <summary>
        /// Send datetime.
        /// </summary>
        /// <value>Send datetime.</value>
        [DataMember(Name="sendTime", EmitDefaultValue=false)]
        public DateTime? SendTime { get; set; }

        /// <summary>
        /// Max number of download
        /// </summary>
        /// <value>Max number of download</value>
        [DataMember(Name="maxDownloadTime", EmitDefaultValue=false)]
        public int? MaxDownloadTime { get; set; }

        /// <summary>
        /// Archive the details in one zip
        /// </summary>
        /// <value>Archive the details in one zip</value>
        [DataMember(Name="detailsAsZip", EmitDefaultValue=false)]
        public bool? DetailsAsZip { get; set; }

        /// <summary>
        /// Default language.
        /// </summary>
        /// <value>Default language.</value>
        [DataMember(Name="defaultLanguage", EmitDefaultValue=false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// Donwload the documents directly from mail
        /// </summary>
        /// <value>Donwload the documents directly from mail</value>
        [DataMember(Name="downloadDirectly", EmitDefaultValue=false)]
        public bool? DownloadDirectly { get; set; }

        /// <summary>
        /// Aggregable sharing.
        /// </summary>
        /// <value>Aggregable sharing.</value>
        [DataMember(Name="aggregable", EmitDefaultValue=false)]
        public bool? Aggregable { get; set; }

        /// <summary>
        /// Possible values:  0: ByDefinition  1: ByDocumentType 
        /// </summary>
        /// <value>Possible values:  0: ByDefinition  1: ByDocumentType </value>
        [DataMember(Name="aggregateMode", EmitDefaultValue=false)]
        public int? AggregateMode { get; set; }

        /// <summary>
        /// Possible values:  0: Link  1: Attachment  2: None 
        /// </summary>
        /// <value>Possible values:  0: Link  1: Attachment  2: None </value>
        [DataMember(Name="sharingMode", EmitDefaultValue=false)]
        public int? SharingMode { get; set; }

        /// <summary>
        /// List of mails to send.
        /// </summary>
        /// <value>List of mails to send.</value>
        [DataMember(Name="mailDefinitions", EmitDefaultValue=false)]
        public List<SharingMailDTO> MailDefinitions { get; set; }

        /// <summary>
        /// List of Html for access to sharing page.
        /// </summary>
        /// <value>List of Html for access to sharing page.</value>
        [DataMember(Name="htmlForAccess", EmitDefaultValue=false)]
        public List<SharingHtmlDTO> HtmlForAccess { get; set; }

        /// <summary>
        /// List of html for expiration page
        /// </summary>
        /// <value>List of html for expiration page</value>
        [DataMember(Name="htmlForExpiration", EmitDefaultValue=false)]
        public List<SharingHtmlDTO> HtmlForExpiration { get; set; }

        /// <summary>
        /// Fields For Profile selection.
        /// </summary>
        /// <value>Fields For Profile selection.</value>
        [DataMember(Name="selectedFields", EmitDefaultValue=false)]
        public SelectDTO SelectedFields { get; set; }

        /// <summary>
        /// Sharing sender.
        /// </summary>
        /// <value>Sharing sender.</value>
        [DataMember(Name="sharingDefinitionSender", EmitDefaultValue=false)]
        public SharingDefinitionSenderDTO SharingDefinitionSender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharingDefinitionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocumentTypeId: ").Append(DocumentTypeId).Append("\n");
            sb.Append("  BusinessUnitCode: ").Append(BusinessUnitCode).Append("\n");
            sb.Append("  Beginning: ").Append(Beginning).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  AfterSend: ").Append(AfterSend).Append("\n");
            sb.Append("  RepeatSendMail: ").Append(RepeatSendMail).Append("\n");
            sb.Append("  RepeatSendMailTime: ").Append(RepeatSendMailTime).Append("\n");
            sb.Append("  RepeatSendMailNumber: ").Append(RepeatSendMailNumber).Append("\n");
            sb.Append("  WorkflowAfterRead: ").Append(WorkflowAfterRead).Append("\n");
            sb.Append("  WorkflowAfterExpiration: ").Append(WorkflowAfterExpiration).Append("\n");
            sb.Append("  WorkflowAfterExpirationNotRead: ").Append(WorkflowAfterExpirationNotRead).Append("\n");
            sb.Append("  AlertForNoRead: ").Append(AlertForNoRead).Append("\n");
            sb.Append("  AlertForNoReadTime: ").Append(AlertForNoReadTime).Append("\n");
            sb.Append("  DisableAfterRead: ").Append(DisableAfterRead).Append("\n");
            sb.Append("  DeleteAfterExpiration: ").Append(DeleteAfterExpiration).Append("\n");
            sb.Append("  ImmediatlySend: ").Append(ImmediatlySend).Append("\n");
            sb.Append("  SendTime: ").Append(SendTime).Append("\n");
            sb.Append("  MaxDownloadTime: ").Append(MaxDownloadTime).Append("\n");
            sb.Append("  DetailsAsZip: ").Append(DetailsAsZip).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  DownloadDirectly: ").Append(DownloadDirectly).Append("\n");
            sb.Append("  Aggregable: ").Append(Aggregable).Append("\n");
            sb.Append("  AggregateMode: ").Append(AggregateMode).Append("\n");
            sb.Append("  SharingMode: ").Append(SharingMode).Append("\n");
            sb.Append("  MailDefinitions: ").Append(MailDefinitions).Append("\n");
            sb.Append("  HtmlForAccess: ").Append(HtmlForAccess).Append("\n");
            sb.Append("  HtmlForExpiration: ").Append(HtmlForExpiration).Append("\n");
            sb.Append("  SelectedFields: ").Append(SelectedFields).Append("\n");
            sb.Append("  SharingDefinitionSender: ").Append(SharingDefinitionSender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharingDefinitionDTO);
        }

        /// <summary>
        /// Returns true if SharingDefinitionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SharingDefinitionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharingDefinitionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DocumentTypeId == input.DocumentTypeId ||
                    (this.DocumentTypeId != null &&
                    this.DocumentTypeId.Equals(input.DocumentTypeId))
                ) && 
                (
                    this.BusinessUnitCode == input.BusinessUnitCode ||
                    (this.BusinessUnitCode != null &&
                    this.BusinessUnitCode.Equals(input.BusinessUnitCode))
                ) && 
                (
                    this.Beginning == input.Beginning ||
                    (this.Beginning != null &&
                    this.Beginning.Equals(input.Beginning))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.AfterSend == input.AfterSend ||
                    (this.AfterSend != null &&
                    this.AfterSend.Equals(input.AfterSend))
                ) && 
                (
                    this.RepeatSendMail == input.RepeatSendMail ||
                    (this.RepeatSendMail != null &&
                    this.RepeatSendMail.Equals(input.RepeatSendMail))
                ) && 
                (
                    this.RepeatSendMailTime == input.RepeatSendMailTime ||
                    (this.RepeatSendMailTime != null &&
                    this.RepeatSendMailTime.Equals(input.RepeatSendMailTime))
                ) && 
                (
                    this.RepeatSendMailNumber == input.RepeatSendMailNumber ||
                    (this.RepeatSendMailNumber != null &&
                    this.RepeatSendMailNumber.Equals(input.RepeatSendMailNumber))
                ) && 
                (
                    this.WorkflowAfterRead == input.WorkflowAfterRead ||
                    (this.WorkflowAfterRead != null &&
                    this.WorkflowAfterRead.Equals(input.WorkflowAfterRead))
                ) && 
                (
                    this.WorkflowAfterExpiration == input.WorkflowAfterExpiration ||
                    (this.WorkflowAfterExpiration != null &&
                    this.WorkflowAfterExpiration.Equals(input.WorkflowAfterExpiration))
                ) && 
                (
                    this.WorkflowAfterExpirationNotRead == input.WorkflowAfterExpirationNotRead ||
                    (this.WorkflowAfterExpirationNotRead != null &&
                    this.WorkflowAfterExpirationNotRead.Equals(input.WorkflowAfterExpirationNotRead))
                ) && 
                (
                    this.AlertForNoRead == input.AlertForNoRead ||
                    (this.AlertForNoRead != null &&
                    this.AlertForNoRead.Equals(input.AlertForNoRead))
                ) && 
                (
                    this.AlertForNoReadTime == input.AlertForNoReadTime ||
                    (this.AlertForNoReadTime != null &&
                    this.AlertForNoReadTime.Equals(input.AlertForNoReadTime))
                ) && 
                (
                    this.DisableAfterRead == input.DisableAfterRead ||
                    (this.DisableAfterRead != null &&
                    this.DisableAfterRead.Equals(input.DisableAfterRead))
                ) && 
                (
                    this.DeleteAfterExpiration == input.DeleteAfterExpiration ||
                    (this.DeleteAfterExpiration != null &&
                    this.DeleteAfterExpiration.Equals(input.DeleteAfterExpiration))
                ) && 
                (
                    this.ImmediatlySend == input.ImmediatlySend ||
                    (this.ImmediatlySend != null &&
                    this.ImmediatlySend.Equals(input.ImmediatlySend))
                ) && 
                (
                    this.SendTime == input.SendTime ||
                    (this.SendTime != null &&
                    this.SendTime.Equals(input.SendTime))
                ) && 
                (
                    this.MaxDownloadTime == input.MaxDownloadTime ||
                    (this.MaxDownloadTime != null &&
                    this.MaxDownloadTime.Equals(input.MaxDownloadTime))
                ) && 
                (
                    this.DetailsAsZip == input.DetailsAsZip ||
                    (this.DetailsAsZip != null &&
                    this.DetailsAsZip.Equals(input.DetailsAsZip))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.DownloadDirectly == input.DownloadDirectly ||
                    (this.DownloadDirectly != null &&
                    this.DownloadDirectly.Equals(input.DownloadDirectly))
                ) && 
                (
                    this.Aggregable == input.Aggregable ||
                    (this.Aggregable != null &&
                    this.Aggregable.Equals(input.Aggregable))
                ) && 
                (
                    this.AggregateMode == input.AggregateMode ||
                    (this.AggregateMode != null &&
                    this.AggregateMode.Equals(input.AggregateMode))
                ) && 
                (
                    this.SharingMode == input.SharingMode ||
                    (this.SharingMode != null &&
                    this.SharingMode.Equals(input.SharingMode))
                ) && 
                (
                    this.MailDefinitions == input.MailDefinitions ||
                    this.MailDefinitions != null &&
                    this.MailDefinitions.SequenceEqual(input.MailDefinitions)
                ) && 
                (
                    this.HtmlForAccess == input.HtmlForAccess ||
                    this.HtmlForAccess != null &&
                    this.HtmlForAccess.SequenceEqual(input.HtmlForAccess)
                ) && 
                (
                    this.HtmlForExpiration == input.HtmlForExpiration ||
                    this.HtmlForExpiration != null &&
                    this.HtmlForExpiration.SequenceEqual(input.HtmlForExpiration)
                ) && 
                (
                    this.SelectedFields == input.SelectedFields ||
                    (this.SelectedFields != null &&
                    this.SelectedFields.Equals(input.SelectedFields))
                ) && 
                (
                    this.SharingDefinitionSender == input.SharingDefinitionSender ||
                    (this.SharingDefinitionSender != null &&
                    this.SharingDefinitionSender.Equals(input.SharingDefinitionSender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DocumentTypeId != null)
                    hashCode = hashCode * 59 + this.DocumentTypeId.GetHashCode();
                if (this.BusinessUnitCode != null)
                    hashCode = hashCode * 59 + this.BusinessUnitCode.GetHashCode();
                if (this.Beginning != null)
                    hashCode = hashCode * 59 + this.Beginning.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.AfterSend != null)
                    hashCode = hashCode * 59 + this.AfterSend.GetHashCode();
                if (this.RepeatSendMail != null)
                    hashCode = hashCode * 59 + this.RepeatSendMail.GetHashCode();
                if (this.RepeatSendMailTime != null)
                    hashCode = hashCode * 59 + this.RepeatSendMailTime.GetHashCode();
                if (this.RepeatSendMailNumber != null)
                    hashCode = hashCode * 59 + this.RepeatSendMailNumber.GetHashCode();
                if (this.WorkflowAfterRead != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterRead.GetHashCode();
                if (this.WorkflowAfterExpiration != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterExpiration.GetHashCode();
                if (this.WorkflowAfterExpirationNotRead != null)
                    hashCode = hashCode * 59 + this.WorkflowAfterExpirationNotRead.GetHashCode();
                if (this.AlertForNoRead != null)
                    hashCode = hashCode * 59 + this.AlertForNoRead.GetHashCode();
                if (this.AlertForNoReadTime != null)
                    hashCode = hashCode * 59 + this.AlertForNoReadTime.GetHashCode();
                if (this.DisableAfterRead != null)
                    hashCode = hashCode * 59 + this.DisableAfterRead.GetHashCode();
                if (this.DeleteAfterExpiration != null)
                    hashCode = hashCode * 59 + this.DeleteAfterExpiration.GetHashCode();
                if (this.ImmediatlySend != null)
                    hashCode = hashCode * 59 + this.ImmediatlySend.GetHashCode();
                if (this.SendTime != null)
                    hashCode = hashCode * 59 + this.SendTime.GetHashCode();
                if (this.MaxDownloadTime != null)
                    hashCode = hashCode * 59 + this.MaxDownloadTime.GetHashCode();
                if (this.DetailsAsZip != null)
                    hashCode = hashCode * 59 + this.DetailsAsZip.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.DownloadDirectly != null)
                    hashCode = hashCode * 59 + this.DownloadDirectly.GetHashCode();
                if (this.Aggregable != null)
                    hashCode = hashCode * 59 + this.Aggregable.GetHashCode();
                if (this.AggregateMode != null)
                    hashCode = hashCode * 59 + this.AggregateMode.GetHashCode();
                if (this.SharingMode != null)
                    hashCode = hashCode * 59 + this.SharingMode.GetHashCode();
                if (this.MailDefinitions != null)
                    hashCode = hashCode * 59 + this.MailDefinitions.GetHashCode();
                if (this.HtmlForAccess != null)
                    hashCode = hashCode * 59 + this.HtmlForAccess.GetHashCode();
                if (this.HtmlForExpiration != null)
                    hashCode = hashCode * 59 + this.HtmlForExpiration.GetHashCode();
                if (this.SelectedFields != null)
                    hashCode = hashCode * 59 + this.SelectedFields.GetHashCode();
                if (this.SharingDefinitionSender != null)
                    hashCode = hashCode * 59 + this.SharingDefinitionSender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
